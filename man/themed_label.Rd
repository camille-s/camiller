% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/themed_label.R
\name{themed_label}
\alias{themed_label}
\title{Create \code{cowplot} label based on a ggplot theme}
\usage{
themed_label(label, theme = NULL, element = "text", x = 0.01, hjust = 0, ...)
}
\arguments{
\item{label}{A string of text for label.}

\item{theme}{A ggplot theme; if \code{NULL} (the default), will get current theme with \code{ggplot2::theme_get()}.}

\item{element}{Name of a theme element; defaults to base text.}

\item{x}{x-position; defaults to 0.01}

\item{hjust}{Horizontal alignment; defaults 0}

\item{...}{Any other arguments to pass to \code{cowplot::draw_label()}.}
}
\value{
A \code{ggplot} object.
}
\description{
This is a wrapper around \code{cowplot::draw_label()} that creates a \code{ggplot}-based label that inherits formatting from a given theme element. It's more or less been superceded by \code{ggplot}'s new \code{plot.title.position} theme argument.
}
\examples{
\dontrun{
# the old way (no longer works): manually adding the label to cowplot::ggdraw()
# title <- cowplot::ggdraw() +
#   themed_label("Plot title", ggplot2::theme_bw(), element = "plot.title", x = 0.05)
# }

# the new way: themed_label does that for you
if (requireNamespace("ggplot2", quietly = TRUE)) {
  town_pops <- race_pops \%>\%
    dplyr::filter(variable == "total") \%>\%
    dplyr::mutate(name = forcats::fct_reorder(as.factor(name), estimate))

  library(ggplot2)
  p <- ggplot(town_pops, aes(x = name, y = estimate)) +
    geom_col() +
    coord_flip()
  # With long labels on the left, ggplot's default title placement
  # aligned to the panel can become awkward
  p + ggtitle("Total population by town, 2017")
  # Instead, make a label grob and arrange plot elements how you want
  title <- themed_label("Total population by town, 2017", element = "plot.title")
  cowplot::plot_grid(
    title,
    p,
    ncol = 1,
    rel_heights = c(1, 10)
  )
}
}
